// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PackCreated extends ethereum.Event {
  get params(): PackCreated__Params {
    return new PackCreated__Params(this);
  }
}

export class PackCreated__Params {
  _event: PackCreated;

  constructor(event: PackCreated) {
    this._event = event;
  }

  get packId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get rewardContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get packState(): PackCreatedPackStateStruct {
    return this._event.parameters[3].value.toTuple() as PackCreatedPackStateStruct;
  }

  get rewards(): PackCreatedRewardsStruct {
    return this._event.parameters[4].value.toTuple() as PackCreatedRewardsStruct;
  }
}

export class PackCreatedPackStateStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get currentSupply(): BigInt {
    return this[2].toBigInt();
  }

  get openStart(): BigInt {
    return this[3].toBigInt();
  }

  get openEnd(): BigInt {
    return this[4].toBigInt();
  }
}

export class PackCreatedRewardsStruct extends ethereum.Tuple {
  get source(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get amountsPacked(): Array<BigInt> {
    return this[2].toBigIntArray();
  }

  get rewardsPerOpen(): BigInt {
    return this[3].toBigInt();
  }
}

export class PackOpenFulfilled extends ethereum.Event {
  get params(): PackOpenFulfilled__Params {
    return new PackOpenFulfilled__Params(this);
  }
}

export class PackOpenFulfilled__Params {
  _event: PackOpenFulfilled;

  constructor(event: PackOpenFulfilled) {
    this._event = event;
  }

  get packId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get opener(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get rewardContract(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rewardIds(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class PackOpenRequest extends ethereum.Event {
  get params(): PackOpenRequest__Params {
    return new PackOpenRequest__Params(this);
  }
}

export class PackOpenRequest__Params {
  _event: PackOpenRequest;

  constructor(event: PackOpenRequest) {
    this._event = event;
  }

  get packId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get opener(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get requestId(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Pack__getPackResultPackStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get currentSupply(): BigInt {
    return this[2].toBigInt();
  }

  get openStart(): BigInt {
    return this[3].toBigInt();
  }

  get openEnd(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pack__getPackWithRewardsResultPackStruct extends ethereum.Tuple {
  get uri(): string {
    return this[0].toString();
  }

  get creator(): Address {
    return this[1].toAddress();
  }

  get currentSupply(): BigInt {
    return this[2].toBigInt();
  }

  get openStart(): BigInt {
    return this[3].toBigInt();
  }

  get openEnd(): BigInt {
    return this[4].toBigInt();
  }
}

export class Pack__getPackWithRewardsResult {
  value0: Pack__getPackWithRewardsResultPackStruct;
  value1: Address;
  value2: Array<BigInt>;
  value3: Array<BigInt>;

  constructor(
    value0: Pack__getPackWithRewardsResultPackStruct,
    value1: Address,
    value2: Array<BigInt>,
    value3: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    return map;
  }
}

export class Pack__getRewardsInPackResult {
  value0: Address;
  value1: Array<BigInt>;
  value2: Array<BigInt>;

  constructor(value0: Address, value1: Array<BigInt>, value2: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigIntArray(this.value2));
    return map;
  }
}

export class Pack__packsResult {
  value0: string;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class Pack__randomnessRequestsResult {
  value0: BigInt;
  value1: Address;

  constructor(value0: BigInt, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class Pack__rewardsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Pack extends ethereum.SmartContract {
  static bind(address: Address): Pack {
    return new Pack("Pack", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  creator(_packId: BigInt): Address {
    let result = super.call("creator", "creator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_packId)
    ]);

    return result[0].toAddress();
  }

  try_creator(_packId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_packId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  currentRequestId(param0: BigInt, param1: Address): Bytes {
    let result = super.call(
      "currentRequestId",
      "currentRequestId(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_currentRequestId(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "currentRequestId",
      "currentRequestId(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getPack(_packId: BigInt): Pack__getPackResultPackStruct {
    let result = super.call(
      "getPack",
      "getPack(uint256):((string,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );

    return result[0].toTuple() as Pack__getPackResultPackStruct;
  }

  try_getPack(
    _packId: BigInt
  ): ethereum.CallResult<Pack__getPackResultPackStruct> {
    let result = super.tryCall(
      "getPack",
      "getPack(uint256):((string,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Pack__getPackResultPackStruct
    );
  }

  getPackWithRewards(_packId: BigInt): Pack__getPackWithRewardsResult {
    let result = super.call(
      "getPackWithRewards",
      "getPackWithRewards(uint256):((string,address,uint256,uint256,uint256),address,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );

    return new Pack__getPackWithRewardsResult(
      result[0].toTuple() as Pack__getPackWithRewardsResultPackStruct,
      result[1].toAddress(),
      result[2].toBigIntArray(),
      result[3].toBigIntArray()
    ) as Pack__getPackWithRewardsResult;
  }

  try_getPackWithRewards(
    _packId: BigInt
  ): ethereum.CallResult<Pack__getPackWithRewardsResult> {
    let result = super.tryCall(
      "getPackWithRewards",
      "getPackWithRewards(uint256):((string,address,uint256,uint256,uint256),address,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pack__getPackWithRewardsResult(
        value[0].toTuple() as Pack__getPackWithRewardsResultPackStruct,
        value[1].toAddress(),
        value[2].toBigIntArray(),
        value[3].toBigIntArray()
      ) as Pack__getPackWithRewardsResult
    );
  }

  getRewardsInPack(_packId: BigInt): Pack__getRewardsInPackResult {
    let result = super.call(
      "getRewardsInPack",
      "getRewardsInPack(uint256):(address,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );

    return new Pack__getRewardsInPackResult(
      result[0].toAddress(),
      result[1].toBigIntArray(),
      result[2].toBigIntArray()
    );
  }

  try_getRewardsInPack(
    _packId: BigInt
  ): ethereum.CallResult<Pack__getRewardsInPackResult> {
    let result = super.tryCall(
      "getRewardsInPack",
      "getRewardsInPack(uint256):(address,uint256[],uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_packId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pack__getRewardsInPackResult(
        value[0].toAddress(),
        value[1].toBigIntArray(),
        value[2].toBigIntArray()
      )
    );
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC1155BatchReceived(
    param0: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    _data: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(_data)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    _from: Address,
    _ids: Array<BigInt>,
    _values: Array<BigInt>,
    _data: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigIntArray(_ids),
        ethereum.Value.fromUnsignedBigIntArray(_values),
        ethereum.Value.fromBytes(_data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  packs(param0: BigInt): Pack__packsResult {
    let result = super.call(
      "packs",
      "packs(uint256):(string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Pack__packsResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_packs(param0: BigInt): ethereum.CallResult<Pack__packsResult> {
    let result = super.tryCall(
      "packs",
      "packs(uint256):(string,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pack__packsResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  randomnessRequests(param0: Bytes): Pack__randomnessRequestsResult {
    let result = super.call(
      "randomnessRequests",
      "randomnessRequests(bytes32):(uint256,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new Pack__randomnessRequestsResult(
      result[0].toBigInt(),
      result[1].toAddress()
    );
  }

  try_randomnessRequests(
    param0: Bytes
  ): ethereum.CallResult<Pack__randomnessRequestsResult> {
    let result = super.tryCall(
      "randomnessRequests",
      "randomnessRequests(bytes32):(uint256,address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pack__randomnessRequestsResult(
        value[0].toBigInt(),
        value[1].toAddress()
      )
    );
  }

  rewards(param0: BigInt): Pack__rewardsResult {
    let result = super.call("rewards", "rewards(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new Pack__rewardsResult(result[0].toAddress(), result[1].toBigInt());
  }

  try_rewards(param0: BigInt): ethereum.CallResult<Pack__rewardsResult> {
    let result = super.tryCall(
      "rewards",
      "rewards(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Pack__rewardsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenURI(_id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(_id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toString();
  }

  try_uri(_id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  vrfFees(): BigInt {
    let result = super.call("vrfFees", "vrfFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_vrfFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("vrfFees", "vrfFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  vrfKeyHash(): Bytes {
    let result = super.call("vrfKeyHash", "vrfKeyHash():(bytes32)", []);

    return result[0].toBytes();
  }

  try_vrfKeyHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("vrfKeyHash", "vrfKeyHash():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controlCenter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _vrfCoordinator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _linkToken(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _keyHash(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _fees(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _trustedForwarder(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OpenPackCall extends ethereum.Call {
  get inputs(): OpenPackCall__Inputs {
    return new OpenPackCall__Inputs(this);
  }

  get outputs(): OpenPackCall__Outputs {
    return new OpenPackCall__Outputs(this);
  }
}

export class OpenPackCall__Inputs {
  _call: OpenPackCall;

  constructor(call: OpenPackCall) {
    this._call = call;
  }

  get _packId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class OpenPackCall__Outputs {
  _call: OpenPackCall;

  constructor(call: OpenPackCall) {
    this._call = call;
  }
}

export class RawFulfillRandomnessCall extends ethereum.Call {
  get inputs(): RawFulfillRandomnessCall__Inputs {
    return new RawFulfillRandomnessCall__Inputs(this);
  }

  get outputs(): RawFulfillRandomnessCall__Outputs {
    return new RawFulfillRandomnessCall__Outputs(this);
  }
}

export class RawFulfillRandomnessCall__Inputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }

  get requestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get randomness(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RawFulfillRandomnessCall__Outputs {
  _call: RawFulfillRandomnessCall;

  constructor(call: RawFulfillRandomnessCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetChainlinkFeesCall extends ethereum.Call {
  get inputs(): SetChainlinkFeesCall__Inputs {
    return new SetChainlinkFeesCall__Inputs(this);
  }

  get outputs(): SetChainlinkFeesCall__Outputs {
    return new SetChainlinkFeesCall__Outputs(this);
  }
}

export class SetChainlinkFeesCall__Inputs {
  _call: SetChainlinkFeesCall;

  constructor(call: SetChainlinkFeesCall) {
    this._call = call;
  }

  get _newFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetChainlinkFeesCall__Outputs {
  _call: SetChainlinkFeesCall;

  constructor(call: SetChainlinkFeesCall) {
    this._call = call;
  }
}

export class TransferLinkCall extends ethereum.Call {
  get inputs(): TransferLinkCall__Inputs {
    return new TransferLinkCall__Inputs(this);
  }

  get outputs(): TransferLinkCall__Outputs {
    return new TransferLinkCall__Outputs(this);
  }
}

export class TransferLinkCall__Inputs {
  _call: TransferLinkCall;

  constructor(call: TransferLinkCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferLinkCall__Outputs {
  _call: TransferLinkCall;

  constructor(call: TransferLinkCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
