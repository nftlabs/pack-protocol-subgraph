// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ListingUpdate extends ethereum.Event {
  get params(): ListingUpdate__Params {
    return new ListingUpdate__Params(this);
  }
}

export class ListingUpdate__Params {
  _event: ListingUpdate;

  constructor(event: ListingUpdate) {
    this._event = event;
  }

  get seller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get listing(): ListingUpdateListingStruct {
    return this._event.parameters[2].value.toTuple() as ListingUpdateListingStruct;
  }
}

export class ListingUpdateListingStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get assetContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get quantity(): BigInt {
    return this[3].toBigInt();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[5].toBigInt();
  }

  get saleStart(): BigInt {
    return this[6].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[7].toBigInt();
  }
}

export class MarketFeesChanged extends ethereum.Event {
  get params(): MarketFeesChanged__Params {
    return new MarketFeesChanged__Params(this);
  }
}

export class MarketFeesChanged__Params {
  _event: MarketFeesChanged;

  constructor(event: MarketFeesChanged) {
    this._event = event;
  }

  get protocolFeeBps(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creatorFeeBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewListing extends ethereum.Event {
  get params(): NewListing__Params {
    return new NewListing__Params(this);
  }
}

export class NewListing__Params {
  _event: NewListing;

  constructor(event: NewListing) {
    this._event = event;
  }

  get assetContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get listing(): NewListingListingStruct {
    return this._event.parameters[3].value.toTuple() as NewListingListingStruct;
  }
}

export class NewListingListingStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get assetContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get quantity(): BigInt {
    return this[3].toBigInt();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[5].toBigInt();
  }

  get saleStart(): BigInt {
    return this[6].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[7].toBigInt();
  }
}

export class NewSale extends ethereum.Event {
  get params(): NewSale__Params {
    return new NewSale__Params(this);
  }
}

export class NewSale__Params {
  _event: NewSale;

  constructor(event: NewSale) {
    this._event = event;
  }

  get assetContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get listingId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get listing(): NewSaleListingStruct {
    return this._event.parameters[4].value.toTuple() as NewSaleListingStruct;
  }
}

export class NewSaleListingStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get assetContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get quantity(): BigInt {
    return this[3].toBigInt();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[5].toBigInt();
  }

  get saleStart(): BigInt {
    return this[6].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[7].toBigInt();
  }
}

export class Market__getListingResultListingStruct extends ethereum.Tuple {
  get seller(): Address {
    return this[0].toAddress();
  }

  get assetContract(): Address {
    return this[1].toAddress();
  }

  get tokenId(): BigInt {
    return this[2].toBigInt();
  }

  get quantity(): BigInt {
    return this[3].toBigInt();
  }

  get currency(): Address {
    return this[4].toAddress();
  }

  get pricePerToken(): BigInt {
    return this[5].toBigInt();
  }

  get saleStart(): BigInt {
    return this[6].toBigInt();
  }

  get saleEnd(): BigInt {
    return this[7].toBigInt();
  }
}

export class Market__listingsResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: BigInt;
  value7: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: BigInt,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }
}

export class Market extends ethereum.SmartContract {
  static bind(address: Address): Market {
    return new Market("Market", address);
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PACK(): string {
    let result = super.call("PACK", "PACK():(string)", []);

    return result[0].toString();
  }

  try_PACK(): ethereum.CallResult<string> {
    let result = super.tryCall("PACK", "PACK():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creatorFeeBps(): BigInt {
    let result = super.call("creatorFeeBps", "creatorFeeBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_creatorFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "creatorFeeBps",
      "creatorFeeBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListing(_listingId: BigInt): Market__getListingResultListingStruct {
    let result = super.call(
      "getListing",
      "getListing(uint256):((address,address,uint256,uint256,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)]
    );

    return result[0].toTuple() as Market__getListingResultListingStruct;
  }

  try_getListing(
    _listingId: BigInt
  ): ethereum.CallResult<Market__getListingResultListingStruct> {
    let result = super.tryCall(
      "getListing",
      "getListing(uint256):((address,address,uint256,uint256,address,uint256,uint256,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_listingId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as Market__getListingResultListingStruct
    );
  }

  listings(param0: BigInt): Market__listingsResult {
    let result = super.call(
      "listings",
      "listings(uint256):(address,address,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Market__listingsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBigInt()
    );
  }

  try_listings(param0: BigInt): ethereum.CallResult<Market__listingsResult> {
    let result = super.tryCall(
      "listings",
      "listings(uint256):(address,address,uint256,uint256,address,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Market__listingsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBigInt()
      )
    );
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  protocolFeeBps(): BigInt {
    let result = super.call("protocolFeeBps", "protocolFeeBps():(uint256)", []);

    return result[0].toBigInt();
  }

  try_protocolFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeeBps",
      "protocolFeeBps():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalListings(): BigInt {
    let result = super.call("totalListings", "totalListings():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalListings(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalListings",
      "totalListings():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _controlCenter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddToListingCall extends ethereum.Call {
  get inputs(): AddToListingCall__Inputs {
    return new AddToListingCall__Inputs(this);
  }

  get outputs(): AddToListingCall__Outputs {
    return new AddToListingCall__Outputs(this);
  }
}

export class AddToListingCall__Inputs {
  _call: AddToListingCall;

  constructor(call: AddToListingCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddToListingCall__Outputs {
  _call: AddToListingCall;

  constructor(call: AddToListingCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class ListCall extends ethereum.Call {
  get inputs(): ListCall__Inputs {
    return new ListCall__Inputs(this);
  }

  get outputs(): ListCall__Outputs {
    return new ListCall__Outputs(this);
  }
}

export class ListCall__Inputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }

  get _assetContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _pricePerToken(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _secondsUntilStart(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _secondsUntilEnd(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ListCall__Outputs {
  _call: ListCall;

  constructor(call: ListCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get _protocolCut(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _creatorCut(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class UnlistCall extends ethereum.Call {
  get inputs(): UnlistCall__Inputs {
    return new UnlistCall__Inputs(this);
  }

  get outputs(): UnlistCall__Outputs {
    return new UnlistCall__Outputs(this);
  }
}

export class UnlistCall__Inputs {
  _call: UnlistCall;

  constructor(call: UnlistCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _quantity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UnlistCall__Outputs {
  _call: UnlistCall;

  constructor(call: UnlistCall) {
    this._call = call;
  }
}

export class UpdateListingParamsCall extends ethereum.Call {
  get inputs(): UpdateListingParamsCall__Inputs {
    return new UpdateListingParamsCall__Inputs(this);
  }

  get outputs(): UpdateListingParamsCall__Outputs {
    return new UpdateListingParamsCall__Outputs(this);
  }
}

export class UpdateListingParamsCall__Inputs {
  _call: UpdateListingParamsCall;

  constructor(call: UpdateListingParamsCall) {
    this._call = call;
  }

  get _listingId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _pricePerToken(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _currency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _secondsUntilStart(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _secondsUntilEnd(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class UpdateListingParamsCall__Outputs {
  _call: UpdateListingParamsCall;

  constructor(call: UpdateListingParamsCall) {
    this._call = call;
  }
}
